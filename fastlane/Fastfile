# fastlane constants
fastlane_version "2.173.0"
default_platform :ios

platform :ios do

  ############ Public Lanes ############

  desc "Runs all test."
  lane :run_all_tests do
    run_unit_tests
    # run_ui_tests
  end

  desc "Sets next expected version for this PR. (branch)"
  lane :run_set_version do |options|
    save_version_token options
    commit_and_push_master
  end

  desc "Runs a master build (tests, lint, documentation, bumps version). (master)"
  lane :run_master_build do
    ensure_git_branch(
      branch: 'master'
    )

    bump_build_number
    bump_version_number
    check_resources
    generate_documentation
    commit_and_push_master
  end

  # desc "Prepares a release. (master)"
  # lane :run_release do |options|
  #   ensure_git_branch(
  #     branch: 'master'
  #   )

  
  #   #git_commit(
  #   #  path: "*.*", 
  #   #  message: "Release new Beta!"
  #   #)
      
  #   #set_tag
  #   #push_git_tags
    
  #   #gym(
  #   #  project: ENV["XCODE_PROJECT_NAME"], 
  #   #  scheme: ENV["XCODE_SCHEME"], 
  #   #  configuration: "Release",
  #   #  clean: true,
  #   #  export_method: "development"
  #   #)
    
  #   #pilot(
  #   #  skip_submission: true
  #   #)
  # end




  # ############ Auxiliar Lanes ############

  # ############ Testing Lanes ############

  private_lane :run_unit_tests do
    scan(
      scheme: ENV["XCODE_SCHEME_TESTS"],
      device: ENV["FASTLANE_TEST_DEVICE"],
      code_coverage: true,
      clean: true
      )
  end

  private_lane :run_ui_tests do
    scan(
      scheme: ENV["XCODE_SCHEME_UI_TESTS"],
      device: ENV["FASTLANE_TEST_DEVICE"],
      clean: true
      )
  end

  # ############ Save Version Token ############
  
  private_lane :save_version_token do |options|
    pr_version_message = options[:version_tag]
    puts "Version token is -> " + pr_version_message

    validate_version_token version_token:pr_version_message

    if (pr_version_message == read_version_token)
      puts "Version Token is the same. Do not need to update file!"
    else
      Dir.chdir("..") do
        File.write("version.txt", pr_version_message)
      end
    end
  end

  private_lane :read_version_token do
    stored_version_token = ""

    Dir.chdir("..") do
      if (File.exist?('version.txt'))
        File.open('version.txt') do |file|
          stored_version_token = file.read().downcase
        end
      end
    end

    stored_version_token
  end

  # ############ Bump Version from file ############

  private_lane :bump_version_number do
    stored_version_token = ""

    Dir.chdir("..") do
      if (File.exist?('version.txt'))
        File.open('version.txt') do |file|
          stored_version_token = file.read().downcase
        end
      else 
        UI.user_error!("File version.txt doesn't exist!!!")
      end
    end

    do_version version_token:stored_version_token

    Dir.chdir("..") do
      File.delete('version.txt')
    end
  end

  desc "Versioning -> Increase: MAJOR, MINOR or PATCH"
  private_lane :do_version do |option|
    validate_version_token version_token:option[:version_token]
    
    increment_version_number(
      bump_type: option[:version_token]
    )
  end

  private_lane :validate_version_token do |option|    
    version_token = option[:version_token]

    if version_token != "patch" && version_token != "minor" && version_token != "major"
      UI.user_error!("Version Token not valid!!!")
    end
  end

  # ############ Bump Build ############

  private_lane :bump_build_number do |option|
    increment_build_number(
      build_number: option[:buildNumber]
    )
  end

  # ############ Resources ############

  private_lane :check_resources do
    swiftlint
    # swiftformat
  end

  private_lane :generate_documentation do
    # jazzy(config: ".jazzy.yaml")
    # xxxxx
  end

  # ############ Git ############

  private_lane :set_tag do
    add_git_tag(
      tag: get_version_number
    )
  end

  private_lane :commit_and_push_master do
    if ENV["FASTLANE_SKIP_PUSH"] == "1"
      puts "FASTLANE TO SKIP COMMIT AND PUSH"
      next
    end

    git_add(path: ".")
    
    git_commit(
      path: ["."], 
      message: "GITHUB Actions: CI auto commit", 
      allow_nothing_to_commit: true
    )
    
    push_to_git_remote(
      no_verify: true,
      set_upstream: true
    )
  end
end
